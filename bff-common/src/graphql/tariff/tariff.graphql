type Mutation {
    createOneProduct(productModel: ProductInput): String
    updateOneProduct(id: String, productModel: ProductInput): String
    deleteOneProduct(id: String): String

    calculateCostYear(calculateModel: CalculateInput): TotalCosts
    uploadFileToProcess(fileProcessModel: FileProcessInput): String

    deleteFilesToProcess(ids: [String]): String
    deleteCalculations(ids: [String]): String

}

type Query {
    listAllProduct: [Product]
    listAllCalculationCost: [CalculationProcessed]
    listAllFilesToProcess: [String]
    startProcessing: String
}

type Product {
    _id: String
    tariffName: String
    description: String
    month: Boolean
    values: Values
}

type Values {
    baseCost: Float
    kwhCost: Float
    maxConsumption: Float
}

input ProductInput {
    tariffName: String
    description: String
    month: Boolean
    values: ValuesInput
}

input ValuesInput {
    baseCost: Float
    kwhCost: Float
    maxConsumption: Float
}

input CalculateInput {
    kwhYear: Float
}

input FileProcessInput {
    name: String
    base64: String
}

type CalculationProcessed {
    _id: String
    person: Person
    dateProcessed: String
    installNumber: String
    totalCosts: TotalCosts
}

type Person {
    firstName: String
    lastName: String
}

type TotalCosts {
    kwhYear: Float
    products: [ProductsTotalYear]
}

type ProductsTotalYear {
    name: String
    description: String
    charger: String
    totalYear: Products
}

type Products {
    baseCostsYear: String
    kwhCostsYear: String
    totalCosts: Float
}